name: BurnInFirmware-Publish
on:
  release:
    types: [published]
workflow_dispatch:
jobs:
  check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      # output as this job,
      # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
      is_update: ${{ steps.check_ver.outputs.is_update }}
      result: ${{ steps.check_ver.outputs.result }}
      docker_tags: ${{ steps.check_ver.outputs.docker_tags }}
    steps:
      - uses: mogeko/latest-version@v1.1.2
        id: check_ver
        with:
          repo: Sensor-Electronic-Technology/BurnInFirmware
  deploy-s01:
    needs: check
    runs-on: [burn-in]
    strategy:
      matrix:
        runner: [ S01, S02, S03, S04, S05, S06, S07, S08, S09, S10 ] # Replace with your runner names
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd /home/setitech/Documents/StationSoft/StationService/app/updates/
          curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  deploy:
    needs: check
    runs-on:
     group: burn-in-runners
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd /home/setitech/Documents/StationSoft/StationService/app/updates/
          curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s01:
  #   needs: check
  #   runs-on: [burn-in,S01]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s02:
  #   needs: build
  #   runs-on: [burn-in,S02]
  # steps:
  #   - uses: actions/checkout@v4
  #   - run: |
  #       cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #       curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s03:
  #   needs: check
  #   runs-on: [burn-in,S03]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s04:
  #   needs: check
  #   runs-on: [burn-in,S04]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s05:
  #   needs: check
  #   runs-on: [burn-in,S05]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s06:
  #   needs: check
  #   runs-on: [burn-in,S06]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s07:
  #   needs: check
  #   runs-on: [burn-in,S07]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s08:
  #   needs: check
  #   runs-on: [burn-in,S08]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s09:
  #   needs: check
  #   runs-on: [burn-in,S09]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex
  # deploy-s10:
  #   needs: check
  #   runs-on: [burn-in,S10]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - run: |
  #         cd /home/setitech/Documents/StationSoft/StationService/app/updates/
  #         curl -L 'https://github.com/Sensor-Electronic-Technology/BurnInFirmware/releases/download/${{fromJson(needs.check.outputs.result).versions.latest.name}}/BurnInFirmwareV3.ino.hex' > BurnInFirmwareV3.ino.hex

  # print: # Just for show the output
  #   name: Print the result from check
  #   runs-on: ubuntu-latest
  #   needs: check
  #   steps:
  #     - run: |
  #         echo '${{ needs.check.outputs.is_update }}'
  #         echo '${{ needs.check.outputs.result }}' | jq '.'
  #         echo '${{ needs.check.outputs.docker_tags }}'
