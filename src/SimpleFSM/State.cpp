/////////////////////////////////////////////////////////////////
#include "State.h"
/////////////////////////////////////////////////////////////////

int State::_next_id = 0;

/////////////////////////////////////////////////////////////////

State::State() {
}

/////////////////////////////////////////////////////////////////

State::State(int stateId, CallbackFunction on_enter, CallbackFunction on_state, CallbackFunction on_exit, bool is_final /* = false */) {
  setup(stateId, on_enter, on_state, on_exit, is_final);
}

/////////////////////////////////////////////////////////////////

void State::setup(int  stateId, CallbackFunction on_enter, CallbackFunction on_state, CallbackFunction on_exit, bool is_final /* = false */) {
  this->state_id = stateId;
  this->on_enter = on_enter;
  this->on_state = on_state;
  this->on_exit = on_exit;
  this->id = _next_id++;
  this->is_final = is_final;
}

/////////////////////////////////////////////////////////////////

int State::getStateId() const {
  return state_id;
}

/////////////////////////////////////////////////////////////////

bool State::isFinal() const {
  return is_final;
}

/////////////////////////////////////////////////////////////////

void State::setStateId(int stateId) {
  this->state_id = stateId;
}

/////////////////////////////////////////////////////////////////

void State::setOnEnterHandler(CallbackFunction f) {
  this->on_enter = f;
}

/////////////////////////////////////////////////////////////////

void State::setOnStateHandler(CallbackFunction f) {
  this->on_state = f;
}

/////////////////////////////////////////////////////////////////

void State::setOnExitHandler(CallbackFunction f) {
  this->on_exit = f;
}

/////////////////////////////////////////////////////////////////

int State::getID() const {
  return id;
}

/////////////////////////////////////////////////////////////////

void State::setAsFinal(bool final /* = true */) {
  is_final = final;
}

/////////////////////////////////////////////////////////////////
